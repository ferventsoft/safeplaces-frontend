import { call, put, takeLatest } from "redux-saga/effects";
import axios from "axios";

export const REQUEST = "safeplaces/commodities/REQUEST";
export const SUCCESS = "safeplaces/commodities/SUCCESS";
export const FAILURE = "safeplaces/commodities/FAILURE";

// Using the https://github.com/erikras/ducks-modular-redux template

const initialState = { patientsList: {} };

export default function reducer(state = initialState, action) {
  switch (action.type) {
    case REQUEST:
      return { ...state, fetching: true, error: null };
    case SUCCESS:
      return { ...state, patientsList: action.data, fetching: false };
    case FAILURE:
      return {
        ...state,
        fetching: false,
        error: action.error,
        errorResponse: action.error.response,
      };
    default:
      return state;
  }
}

export const addPatient = (data) => {
  return {
    type: REQUEST,
    data,
  };
};

export function* patientsSaga() {
  yield takeLatest(REQUEST, workerSaga);
}

function fetchSaga() {
  const url = `${process.env.REACT_APP_API_URL}/patients/`;

  return axios({
    method: "GET",
    url: url,
  });
}

function* workerSaga() {
  try {
    const response = yield call(fetchSaga);
    const data = response.data.results;
    yield put({ type: SUCCESS, data });
  } catch (error) {
    yield put({ type: FAILURE, error });
  }
}

export const getAllPatients = (state) => state.patients.patientsList;

export const getHealedPatients = (state) => {
  const patients = getAllPatients(state);
  return patients.map((c) => c.isHealed === true);
};
